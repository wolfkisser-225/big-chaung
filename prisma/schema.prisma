// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      UserRole @default(USER)
  avatar    String?  @db.VarChar(255)
  bio       String?  @db.Text
  score     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  submissions Submission[]
  contests    ContestParticipant[]

  @@map("users")
}

// 用户角色枚举
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

// 题目模型
model Challenge {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(200)
  description String        @db.Text
  category    String        @db.VarChar(50)
  difficulty  Difficulty
  points      Int
  flag        String        @db.VarChar(255)
  hints       Json?
  files       Json?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // 关联关系
  submissions Submission[]
  contests    ContestChallenge[]

  @@map("challenges")
}

// 难度枚举
enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

// 提交记录模型
model Submission {
  id          Int              @id @default(autoincrement())
  userId      Int
  challengeId Int
  flag        String           @db.VarChar(255)
  status      SubmissionStatus
  submittedAt DateTime         @default(now())

  // 关联关系
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

// 提交状态枚举
enum SubmissionStatus {
  CORRECT
  INCORRECT
  PENDING
}

// 比赛模型
model Contest {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200)
  description String   @db.Text
  startTime   DateTime
  endTime     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  participants ContestParticipant[]
  challenges   ContestChallenge[]

  @@map("contests")
}

// 比赛参与者模型
model ContestParticipant {
  id        Int      @id @default(autoincrement())
  userId    Int
  contestId Int
  score     Int      @default(0)
  joinedAt  DateTime @default(now())

  // 关联关系
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
  @@map("contest_participants")
}

// 比赛题目关联模型
model ContestChallenge {
  id          Int @id @default(autoincrement())
  contestId   Int
  challengeId Int

  // 关联关系
  contest   Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([contestId, challengeId])
  @@map("contest_challenges")
}
